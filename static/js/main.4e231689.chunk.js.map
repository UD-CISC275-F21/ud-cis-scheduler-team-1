{"version":3,"sources":["interfaces/semester.ts","components/SemesterTitleEdit.tsx","components/CourseModal.tsx","components/SemesterTable.tsx","components/FourYearPlan.tsx","components/Requirements.tsx","components/DraggableCourse.tsx","components/CoursePool.tsx","utilities/findCourse.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["season","SemesterTitleEdit","semester","setSemester","semesters","setSemesters","years","Array","from","keys","map","x","compareSemesters","semester1","semester2","year","seasonsOrder","Object","values","indexOf","updateSemesters","tmp","i","length","sort","Form","Row","className","Col","Select","defaultValue","onChange","ev","newSem","target","value","fall","winter","spring","summer","CourseModal","show","setShow","mod","setMod","handleSave","name","previousValue","newMod","info","descr","credits","preReq","restrict","breadth","typ","console","log","Modal","size","onHide","Header","closeButton","Title","code","onSave","Body","md","rows","Footer","Button","variant","onClick","courses","findIndex","c","handleSaveChanges","SemesterTable","sem","useState","useDrop","accept","drop","item","includes","alert","collect","monitor","isOver","dropRef","ref","Table","striped","bordered","hover","colSpan","filter","removeSemester","course","JSON","parse","stringify","grade","updateGrades","FourYearPlan","downloadJSON","a","downloadData","fileName","json","blob","Blob","URL","createObjectURL","fileDownloadUrl","link","document","createElement","href","download","body","appendChild","click","removeChild","CSVdata","forEach","push","courseName","creditShown","gradeShown","toString","nlist","id","xs","ButtonGroup","addSemester","splice","window","location","reload","data","headers","label","key","filename","Requirements","DraggableCourse","useDrag","type","isDragging","dragRef","CoursePool","inpu","setInpu","setCourses","addCourse","substr","CATALOG_DATA","Catalog","undefined","findCourse","some","el","onSubmit","event","preventDefault","Group","controlId","Label","Control","placeholder","e","toUpperCase","defaultSemesters","App","DndProvider","backend","HTML5Backend","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4e231689.chunk.js","sourcesContent":["import { CourseDisplay } from \"./course\";\n\nexport enum season {\n    winter = \"Winter\",\n    spring = \"Spring\",\n    summer = \"Summer\", \n    fall = \"Fall\"\n}\nexport interface Semester {\n    season: season\n    year: number\n    courses: CourseDisplay[]\n}","import React from \"react\";\nimport { Row, Col, Form } from \"react-bootstrap\";\nimport { Semester, season } from \"../interfaces/semester\";\nimport \"../App.css\";\n\ninterface semesterTitleEdit {\n    semester: Semester;\n    setSemester: (s: Semester) => void;\n    semesters: Semester[];\n    setSemesters: (sems: Semester[]) =>void\n}\n\nexport function SemesterTitleEdit({ semester, setSemester, semesters, setSemesters }: semesterTitleEdit): JSX.Element {\n    const years = Array.from(Array(30).keys()).map(x => x + 2012);\n    function compareSemesters(semester1: Semester, semester2: Semester): number {\n        if (semester1.year < semester2.year) {\n            return -1;\n        } else if (semester1.year > semester2.year) {\n            return 1;\n        } else {\n            const seasonsOrder = Object.values(season);\n            if (seasonsOrder.indexOf(semester1.season) < seasonsOrder.indexOf(semester2.season)) {\n                return -1;\n            } else if (seasonsOrder.indexOf(semester1.season) > seasonsOrder.indexOf(semester2.season)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    function updateSemesters():void{\n        let tmp:Semester[] = [];\n        for(let i = 0; i < semesters.length; i++){\n            if((semesters[i].year === semester.year) && (semesters[i].season === semester.season)){\n                tmp = [...tmp, semester];\n            }else{\n                tmp = [...tmp, semesters[i]];\n            }\n        }\n        tmp.sort(compareSemesters);\n        setSemesters(tmp);\n    }\n\n    return <Form>\n        <Row className=\"g-2\">\n            <Col>\n                <Form.Select aria-label=\"Select season\" defaultValue={semester.season}\n                    onChange={(ev: React.ChangeEvent<HTMLSelectElement>) => {\n                        const newSem: Semester = semester;\n                        newSem.season = ev.target.value as season;\n                        //const newSemester:Semester = {...semester, season: ev.target.value as season};\n                        setSemester(newSem);\n                        updateSemesters();\n                    }}>\n                    <option value={season.fall}>Fall</option>\n                    <option value={season.winter}>Winter</option>\n                    <option value={season.spring}>Spring</option>\n                    <option value={season.summer}>Summer</option>\n                </Form.Select>\n            </Col>\n            <Col>\n                <Form.Select aria-label=\"Select year\" defaultValue={semester.year}\n                    onChange={(ev: React.ChangeEvent<HTMLSelectElement>) => {\n                        const newSem: Semester = semester;\n                        newSem.year = +ev.target.value;\n                        //const newSemester = {...semester, year: +ev.target.value};\n                        setSemester(newSem);\n                        updateSemesters();\n                    }}>\n                    <option>Select Year</option>\n                    {years.map((year) => <option key={year}>{year}</option>)}\n                </Form.Select>\n            </Col>\n        </Row>\n    </Form>;\n}","import React from \"react\";\nimport {Button, Col, Row, Modal} from \"react-bootstrap\";\nimport {EditText, EditTextarea} from \"react-edit-text\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport \"react-edit-text/dist/index.css\";\nimport { Semester } from \"../interfaces/semester\";\nimport \"../App.css\";\n\n\ninterface courseModal {\n    show: boolean;\n    setShow: (s: boolean) => void;\n    semester: Semester;\n    setSemester: (setC: Semester) => void;\n    mod: CourseDisplay;\n    setMod: (setMod: CourseDisplay) => void;\n}\ninterface save{\n    name : string;\n    value : string;\n    previousValue : string;\n}\n\nexport function CourseModal({\n    show,\n    setShow,\n    semester,\n    setSemester,\n    mod,\n    setMod,\n}: courseModal): JSX.Element {\n\n    //handle staging chnaged info\n    const handleSave = ({\n        name,\n        value,\n        previousValue,\n    }: save) => {\n        const newMod: CourseDisplay = mod;\n        switch (name) {\n        case \"name\": {\n            newMod.info.name = value;\n            break;\n        }\n        case \"descr\": {\n            newMod.info.descr = value;\n            break;\n        }\n        case \"credits\": {\n            newMod.info.credits = value;\n            break;\n        }\n        case \"preReq\": {\n            newMod.info.preReq = value;\n            break;\n        }\n        case \"restrict\": {\n            newMod.info.restrict = value;\n            break;\n        }\n        case \"breadth\": {\n            newMod.info.breadth = value;\n            break;\n        }\n        case \"typ\": {\n            newMod.info.typ = value;\n            break;\n        }\n        }\n        setMod(newMod);\n        console.log(\"Previous info: \" + previousValue);\n        console.log(\"New info: \" + value);\n    };\n\n    //handle reset courses info after modifying in modal\n    function handleSaveChanges(): void {\n        const newSem : Semester = semester;\n        newSem.courses[semester.courses.findIndex(c => c.info.code == mod.info.code)] = mod;\n        setSemester(newSem);\n    }\n    return (\n        <Modal\n            show={show}\n            size=\"lg\"\n            onHide={() => {\n                setShow(false);\n            }}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    {mod?.info.code}\n                    <EditText\n                        name=\"name\"\n                        defaultValue={mod?.info.name}\n                        onSave={handleSave}></EditText>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Description:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={4}\n                            name=\"descr\"\n                            defaultValue={mod?.info.descr}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Credits:</strong>\n                    </Col>\n                    <Col>\n                        <EditText\n                            name=\"credits\"\n                            defaultValue={mod?.info.credits}\n                            onSave={handleSave}></EditText>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Pre-Reqs:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"preReq\"\n                            defaultValue={mod?.info.preReq}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Restriction:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"restrict\"\n                            defaultValue={mod?.info.restrict}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Breadth:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"breadth\"\n                            defaultValue={mod?.info.breadth}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Avalability:</strong>\n                    </Col>\n                    <Col>\n                        <EditText\n                            name=\"typ\"\n                            defaultValue={mod?.info.typ}\n                            onSave={handleSave}></EditText>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        setShow(false);\n                    }}>\n                    Close\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                        handleSaveChanges();\n                        setShow(false);\n                    }}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React, {useState} from \"react\";\nimport {Button, Col, Table, Form} from \"react-bootstrap\";\nimport {season, Semester} from \"../interfaces/semester\";\nimport {SemesterTitleEdit} from \"./SemesterTitleEdit\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport {CourseModal} from \"./CourseModal\";\nimport \"../App.css\";\nimport { useDrop } from \"react-dnd\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n/* Drag and Drop came from https://medium.com/nmc-techblog/easy-drag-and-drop-in-react-22778b30ba37 */\n\ninterface semesterTable {\n    sem: Semester;\n    setSemesters: (s: Semester[]) => void;\n    semesters: Semester[];\n}\n\nexport function SemesterTable({sem, setSemesters, semesters}: semesterTable): JSX.Element {\n    const [semester, setSemester] = useState<Semester>(sem);\n    //const [semesterCourses, setSemesterCourses] = useState<CourseDisplay[]>();    \n    const [show, setShow] = useState<boolean>(false); //To show Modal when Course is clicked\n    const [mod, setMod] = useState<CourseDisplay>(semester.courses[0]); // staging the changed info before save\n    // Removes a course from a semester based on its name\n    function removeCourse(name: string): void {\n        setSemester({ ...semester, courses: semester.courses.filter(course => course.info.name !== name) });\n        sem = semester;\n    }\n\n    function removeSemester(season: season, year: number): void {\n        setSemesters([...semesters.filter(semester => (semester.season !== season) && (semester.year !== year))]);\n    }\n\n    function updateSemesters():void{\n        let tmp:Semester[] = [];\n        for(let i = 0; i < semesters.length; i++){\n            if((semesters[i].year === semester.year) && (semesters[i].season === semester.season)){\n                tmp = [...tmp, semester];\n            }else{\n                tmp = [...tmp, semesters[i]];\n            }\n        }\n        setSemesters(tmp);\n    }\n\n    const [{ isOver }, dropRef] = useDrop({\n        accept: \"course\",\n        drop: (item:CourseDisplay) => {\n            if(!semester.courses.includes(item)){\n                const newSem : Semester = semester;\n                newSem.courses = [...semester.courses, item];\n                setSemester(newSem);\n                updateSemesters();\n            }else{\n                alert(\"Course is Already in Semester\");\n            }\n        },\n        collect: (monitor) => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    function updateGrades(sem:Semester, course:CourseDisplay):CourseDisplay[]{\n        let tmp:CourseDisplay[] = [];\n        for(let i = 0; i < sem.courses.length; i++){\n            if(sem.courses[i].info.code === course.info.code){\n                tmp = [...tmp, course];\n            }else{\n                tmp = [...tmp, sem.courses[i]];\n            }\n        }\n        return tmp;        \n    }\n\n    return (\n        <Col ref = {dropRef}>\n            <Table striped bordered hover className=\"semester\">\n                <thead>\n                    <tr>\n                        <th colSpan={3}><SemesterTitleEdit semester={semester} setSemester={setSemester} semesters ={semesters} setSemesters ={setSemesters}></SemesterTitleEdit></th>\n                        <th>\n                            <Button size=\"sm\" variant=\"outline-danger\" onClick={() => removeSemester(semester.season, semester.year)}>\n                                X\n                            </Button>\n                        </th>\n                    </tr>\n                    <tr>\n                        <th>Course</th>\n                        <th>Credits</th>\n                        <th>Grade</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {semester.courses.map(course =>\n                        <tr key={course.info.name}>\n                            <td>\n                                <a\n                                    onClick={() => {\n                                        setShow(true);\n                                        setMod(JSON.parse(JSON.stringify(course)));\n                                    }}>\n                                    {course.info.code}\n                                    <br></br>\n                                    {course.info.name}\n                                </a>\n                            </td>\n                            <td>{course.info.credits}</td>\n                            <td><Form>\n                                <Form.Select size=\"sm\" aria-label=\"Select grade\" defaultValue=\"-\"\n                                    onChange={(ev: React.ChangeEvent<HTMLSelectElement>) => {\n                                        course = {...course, grade: ev.target.value as string};\n                                        const newSem = semester;\n                                        newSem.courses = updateGrades(newSem, course);\n                                        setSemester(newSem);\n                                        updateSemesters();\n                                    }}>\n                                    <option value={\"-\"}>-</option>\n                                    <option value={\"A\"}>A</option>\n                                    <option value={\"A-\"}>A-</option>\n                                    <option value={\"B+\"}>B+</option>\n                                    <option value={\"B\"}>B</option>\n                                    <option value={\"B-\"}>B-</option>\n                                    <option value={\"C+\"}>C+</option>\n                                    <option value={\"C\"}>C</option>\n                                    <option value={\"C-\"}>C-</option>\n                                    <option value={\"D+\"}>D+</option>\n                                    <option value={\"D\"}>D</option>\n                                    <option value={\"D-\"}>D-</option>\n                                    <option value={\"F\"}>F</option>\n                                    <option value={\"P\"}>P</option>\n                                </Form.Select>\n                            </Form></td>\n                            <td>\n                                <Button size=\"sm\" variant=\"outline-danger\" onClick={() => removeCourse(course.info.name)}>\n                                    {\" \"}\n                                    X{\" \"}\n                                </Button>\n                            </td>\n                        </tr>\n                    )}\n                    {isOver}\n                </tbody>\n            </Table>\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    setSemester({ ...semester, courses: [] });\n                }}>\n                Delete All Courses\n            </Button>\n\n            {show && <CourseModal\n                show ={show}\n                setShow={setShow}\n                semester={semester}\n                setSemester={setSemester}\n                mod={mod}\n                setMod={setMod}></CourseModal>}\n        </Col>\n    );\n}\n","import React from \"react\";\nimport {Button, Row, ButtonGroup} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../App.css\";\nimport {season, Semester} from \"../interfaces/semester\";\nimport {SemesterTable} from \"./SemesterTable\";\nimport {CSVLink} from \"react-csv\";\nimport \"../App.css\";\n\n// import { Course } from \"../interfaces/course\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n/* Downloading CSV file code helper from https://stackoverflow.com/a/65794124/17305181*/\n\ninterface fyp {\n    semesters: Semester[];\n    setSemesters: (s: Semester[]) => void;\n}\ninterface iCSVdata {\n    courseName: string;\n    creditShown: string;\n    gradeShown: string;\n}\nexport function FourYearPlan({semesters, setSemesters}: fyp): JSX.Element {\n    // Removes the most recently added semester in the list, does nothing if no semesters left\n    function removeLastSemester(): void {\n        if (semesters.length) {\n            semesters.splice(-1);\n            setSemesters([...semesters]);\n        }\n    }\n\n    // Adds a new semester with the given title (ex. \"Fall 2021\") and no courses\n    function addSemester(season: season, year: number): void {\n        setSemesters([...semesters, {season: season, year: year, courses: []}]);\n    }\n\n    //Download JSON file trial\n    const downloadJSON = async () => {\n        const downloadData: Semester[] = semesters;\n        const fileName = \"My-Schedule\";\n        const json = JSON.stringify(downloadData); //Convert JSON Array to string.\n        const blob = new Blob([json]); //Convert JSON string to BLOB.\n        const fileDownloadUrl = await URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = fileDownloadUrl;\n        link.download = fileName + \".json\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    //Download CSV file trial\n    const CSVheaders = [\n        {label: \"\", key: \"courseName\"},\n        {label: \"My Schedule\", key: \"creditShown\"},\n        {label: \"\", key: \"gradeShown\"},\n    ];\n    const CSVdata: iCSVdata[] = [];\n    semesters.forEach(item => {\n        CSVdata.push({\n            courseName: \"\",\n            creditShown: \"\",\n            gradeShown: \"\",\n        });\n        CSVdata.push({\n            courseName: item.season,\n            creditShown: item.year.toString(),\n            gradeShown: \"\",\n        });\n        CSVdata.push({\n            courseName: \"Courses\",\n            creditShown: \"Credits\",\n            gradeShown: \"Grades\",\n        });\n        CSVdata.push({\n            courseName: item.courses[0]?.info.code,\n            creditShown: item.courses[0]?.info.credits,\n            gradeShown: item.courses[0]?.grade,\n        });\n        for (let i = 1; i < item.courses.length; i++) {\n            const nlist = item.courses[i];\n            CSVdata.push({\n                courseName: nlist.info.code,\n                creditShown: nlist.info.credits,\n                gradeShown: nlist.grade,\n            });\n        }\n    });\n    return (\n        <div id=\"plan\">\n            <h2 className=\"subtitle\">Four Year Plan</h2>\n            <Row xs={1} md={2} className=\"g-4\">\n                {semesters.map(semester => \n                    <div key={semester.season + semester.year}>\n                        <SemesterTable\n                            sem={semester}\n                            setSemesters={setSemesters}\n                            semesters={semesters}></SemesterTable>\n                    </div>\n                )}\n            </Row>\n            <Row>\n                <ButtonGroup id=\"buttonGroup\">\n                    <Button\n                        id=\"big-scope-button\"\n                        onClick={() => {\n                            addSemester(season.summer, 2022);\n                            console.log(CSVdata);\n                        }}>\n                        + Add Semester\n                    </Button>\n                    <Button\n                        id=\"big-scope-button\"\n                        variant=\"danger\"\n                        onClick={() => {\n                            removeLastSemester();\n                        }}>\n                        - Delete Semester\n                    </Button>\n                    <Button\n                        id=\"big-scope-button\"\n                        variant=\"secondary\"\n                        onClick={() => {\n                            window.location.reload();\n                        }}>\n                        Reset Plan\n                    </Button>\n                </ButtonGroup>\n            </Row>\n            <Row>\n                <ButtonGroup id=\"buttonGroup\">\n                    <Button id=\"big-scope-button\" variant=\"info\">\n                        <CSVLink id=\"csvlink\" data={CSVdata} headers={CSVheaders} filename={\"My-Schedule.csv\"}>\n                            Download as .CSV\n                        </CSVLink>\n                    </Button>\n                    <Button id=\"big-scope-button\" variant=\"info\" onClick={downloadJSON}>\n                        Download as .JSON\n                    </Button>\n                </ButtonGroup>\n            </Row>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport function Requirements(): JSX.Element {\n\n    return<Col>\n        <h2 className = \"subtitle\">Degree Requirements</h2>\n        <p>Below are the list of degree requirements that remain unsatisfied.</p>\n    </Col>;\n}","// Drag and Drop used https://medium.com/nmc-techblog/easy-drag-and-drop-in-react-22778b30ba37\n\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { CourseDisplay } from \"../interfaces/course\";\n\ninterface dragClass{\n    course:CourseDisplay\n}\n\nexport function DraggableCourse({course}: dragClass): JSX.Element {\n    const [{ isDragging }, dragRef] = useDrag({\n        type: \"course\",\n        item: course,\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n    return (\n        <div className = \"dragCourse\" ref={dragRef}>\n            {course.info.code} {course.info.name}\n            {isDragging}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Button, Col, Form } from \"react-bootstrap\";\nimport \"../App.css\";\nimport { Course, CourseDisplay } from \"../interfaces/course\";\nimport { findCourse } from \"../utilities/findCourse\";\nimport {DraggableCourse} from \"./DraggableCourse\";\nimport \"../App.css\";\n\nexport function CoursePool(): JSX.Element {\n    const [inpu, setInpu] = useState<string>(\"\");\n    const [courses, setCourses] = useState<CourseDisplay[]>([]);\n\n    function courseExists(code:string):boolean{\n        return courses.some(function(el:CourseDisplay) {\n            return el.info.code === code;\n        });         \n    }\n\n    function addCourse(name: string): void {\n        const course:Course = findCourse(name);\n        if(course.name === \"\"){\n            alert(\"Course Does not Exist\");\n        }else{\n            if(courseExists(name)){\n                alert(\"Course is Already in Pool\");\n            } else{\n                setCourses([...courses, {info:course, grade:\"-\"}]);\n            }\n        }\n    }\n\n    return<Col>\n        <h2 className = \"subtitle\">Course Pool</h2>\n        <Form id= \"searchBar\" onSubmit={(event)=>{\n            addCourse(inpu);\n            event.preventDefault();\n        }}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Enter desired course like so: ACCT 207</Form.Label>\n                <Form.Control value = {inpu} type=\"text\" placeholder=\"Coure Code\" onChange={e=>setInpu(e.target.value.toUpperCase())} />\n            </Form.Group>\n            <Button onClick={() => {\n                addCourse(inpu);\n            }}>\n            Add Course  \n            </Button>\n        </Form>\n        {courses.map(course => \n            <div key = {course.info.code}>\n                <DraggableCourse course = {course}></DraggableCourse>\n            </div>\n        )}\n    </Col>;\n}","import { Course } from \"../interfaces/course\";\nimport Catalog from \"../data/catalog.json\";\n\nexport function findCourse(name:string): Course{\n    const code = name.substr(0, 4);\n    const CATALOG_DATA: Record<string, Record<string, Course>> = Catalog;\n    let course:Course;\n    try{\n        course = CATALOG_DATA[code][name];\n    }catch{\n        console.log(\"catch\");\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    if(course === undefined){\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    return course;\n}","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {FourYearPlan} from \"./components/FourYearPlan\";\nimport {Requirements} from \"./components/Requirements\";\nimport {CoursePool} from \"./components/CoursePool\";\nimport { DndProvider } from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\n\nimport { season, Semester } from \"./interfaces/semester\";\n//import {CourseDisplay } from \"./interfaces/course\";\n//import { findCourse } from \"./utilities/findCourse\";\n\n/*const testCourses: CourseDisplay[] = [\n    {info: findCourse(\"EGGG 101\"), grade: \"F\"},\n    {info: findCourse(\"CISC 108\"), grade: \"F\"},\n    {info: findCourse(\"MATH 241\"), grade: \"F\"},\n    {info: findCourse(\"ENGL 110\"), grade: \"F\"},\n    {info: findCourse(\"ARTH 237\"), grade: \"F\"},\n];*/\n\nconst defaultSemesters: Semester[] = [\n    {season: season.fall, year: 2021, courses: []},\n    {season: season.spring, year: 2022, courses: []}\n];\n\n\n\nfunction App(): JSX.Element {\n    // All courses in our database\n    // const [courses, setCourses] = useState<Course[]>(testCourses);\n\n    const [semesters, setSemesters] = useState<Semester[]>(defaultSemesters);\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Container fluid className=\"App\">\n                <h1 id=\"title\">UD CIS Scheduler</h1>\n                <Row>\n                    <Col><CoursePool></CoursePool></Col>\n                    <Col md={8}><FourYearPlan semesters={semesters} setSemesters={setSemesters} ></FourYearPlan></Col>\n                    <Col><Requirements></Requirements></Col>\n                </Row>\n            </Container>\n        </DndProvider>\n    );\n}\n    \nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}