{"version":3,"sources":["components/CourseModal.tsx","components/SemesterTable.tsx","interfaces/semester.ts","components/AddSemesterModal.tsx","components/FourYearPlan.tsx","components/Requirements.tsx","components/DraggableCourse.tsx","components/CoursePool.tsx","utilities/findCourse.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CourseModal","show","setShow","semester","setSemester","mod","setMod","handleSave","name","value","previousValue","newMod","info","descr","credits","preReq","restrict","breadth","typ","console","log","Modal","size","onHide","Header","closeButton","Title","code","defaultValue","onSave","Body","Row","Col","md","rows","Footer","Button","variant","onClick","newSem","courses","findIndex","c","handleSaveChanges","SemesterTable","sem","setSemesters","semesters","useState","updateSemesters","tmp","i","length","year","season","useDrop","accept","drop","item","includes","alert","collect","monitor","isOver","dropRef","ref","Table","striped","bordered","hover","className","colSpan","filter","map","course","JSON","parse","stringify","Form","Select","onChange","ev","grade","target","updateGrades","AddSemesterModal","fall","inputSeason","setInputSeason","inputYear","setInputYear","years","Array","from","keys","x","Dropdown","Toggle","id","Menu","Item","winter","spring","summer","push","FourYearPlan","downloadJSON","a","downloadData","fileName","json","blob","Blob","URL","createObjectURL","fileDownloadUrl","link","document","createElement","href","download","body","appendChild","click","removeChild","CSVdata","forEach","courseName","creditShown","gradeShown","toString","nlist","xs","ButtonGroup","window","location","reload","data","headers","label","key","filename","Requirements","DraggableCourse","useDrag","type","isDragging","dragRef","CoursePool","inpu","setInpu","setCourses","addCourse","substr","CATALOG_DATA","Catalog","undefined","findCourse","some","el","onSubmit","event","preventDefault","Group","controlId","Label","Control","placeholder","e","toUpperCase","defaultSemesters","App","DndProvider","backend","HTML5Backend","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.783088c4.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button, Col, Row, Modal} from \"react-bootstrap\";\nimport {EditText, EditTextarea} from \"react-edit-text\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport \"react-edit-text/dist/index.css\";\nimport { Semester } from \"../interfaces/semester\";\nimport \"../App.css\";\n\n\ninterface courseModal {\n    show: boolean;\n    setShow: (s: boolean) => void;\n    semester: Semester;\n    setSemester: (setC: Semester) => void;\n    mod: CourseDisplay;\n    setMod: (setMod: CourseDisplay) => void;\n}\ninterface save{\n    name : string;\n    value : string;\n    previousValue : string;\n}\n\nexport function CourseModal({\n    show,\n    setShow,\n    semester,\n    setSemester,\n    mod,\n    setMod,\n}: courseModal): JSX.Element {\n\n    //handle staging chnaged info\n    const handleSave = ({\n        name,\n        value,\n        previousValue,\n    }: save) => {\n        const newMod: CourseDisplay = mod;\n        switch (name) {\n        case \"name\": {\n            newMod.info.name = value;\n            break;\n        }\n        case \"descr\": {\n            newMod.info.descr = value;\n            break;\n        }\n        case \"credits\": {\n            newMod.info.credits = value;\n            break;\n        }\n        case \"preReq\": {\n            newMod.info.preReq = value;\n            break;\n        }\n        case \"restrict\": {\n            newMod.info.restrict = value;\n            break;\n        }\n        case \"breadth\": {\n            newMod.info.breadth = value;\n            break;\n        }\n        case \"typ\": {\n            newMod.info.typ = value;\n            break;\n        }\n        }\n        setMod(newMod);\n        console.log(\"Previous info: \" + previousValue);\n        console.log(\"New info: \" + value);\n    };\n\n    //handle reset courses info after modifying in modal\n    function handleSaveChanges(): void {\n        const newSem : Semester = semester;\n        newSem.courses[semester.courses.findIndex(c => c.info.code == mod.info.code)] = mod;\n        setSemester(newSem);\n    }\n    return (\n        <Modal\n            show={show}\n            size=\"lg\"\n            onHide={() => {\n                setShow(false);\n            }}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    {mod?.info.code}\n                    <EditText\n                        name=\"name\"\n                        defaultValue={mod?.info.name}\n                        onSave={handleSave}></EditText>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Description:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={4}\n                            name=\"descr\"\n                            defaultValue={mod?.info.descr}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Credits:</strong>\n                    </Col>\n                    <Col>\n                        <EditText\n                            name=\"credits\"\n                            defaultValue={mod?.info.credits}\n                            onSave={handleSave}></EditText>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Pre-Reqs:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"preReq\"\n                            defaultValue={mod?.info.preReq}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Restriction:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"restrict\"\n                            defaultValue={mod?.info.restrict}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Breadth:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"breadth\"\n                            defaultValue={mod?.info.breadth}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Avalability:</strong>\n                    </Col>\n                    <Col>\n                        <EditText\n                            name=\"typ\"\n                            defaultValue={mod?.info.typ}\n                            onSave={handleSave}></EditText>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        setShow(false);\n                    }}>\n                    Close\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                        handleSaveChanges();\n                        setShow(false);\n                    }}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React, {useState} from \"react\";\nimport {Button, Col, Table, Form} from \"react-bootstrap\";\nimport {season, Semester} from \"../interfaces/semester\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport {CourseModal} from \"./CourseModal\";\nimport \"../App.css\";\nimport { useDrop } from \"react-dnd\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n/* Drag and Drop came from https://medium.com/nmc-techblog/easy-drag-and-drop-in-react-22778b30ba37 */\n\ninterface semesterTable {\n    sem: Semester;\n    setSemesters: (s: Semester[]) => void;\n    semesters: Semester[];\n}\n\nexport function SemesterTable({sem, setSemesters, semesters}: semesterTable): JSX.Element {\n    const [semester, setSemester] = useState<Semester>(sem);\n    //const [semesterCourses, setSemesterCourses] = useState<CourseDisplay[]>();    \n    const [show, setShow] = useState<boolean>(false); //To show Modal when Course is clicked\n    const [mod, setMod] = useState<CourseDisplay>(semester.courses[0]); // staging the changed info before save\n    // Removes a course from a semester based on its name\n    function removeCourse(name: string): void {\n        setSemester({ ...semester, courses: semester.courses.filter(course => course.info.name !== name) });\n        sem = semester;\n    }\n\n    function removeSemester(season: season, year: number): void {\n        setSemesters([...semesters.filter(semester => (semester.season !== season) && (semester.year !== year))]);\n    }\n\n    function updateSemesters():void{\n        let tmp:Semester[] = [];\n        for(let i = 0; i < semesters.length; i++){\n            if((semesters[i].year === semester.year) && (semesters[i].season === semester.season)){\n                tmp = [...tmp, semester];\n            }else{\n                tmp = [...tmp, semesters[i]];\n            }\n        }\n        setSemesters(tmp);\n    }\n\n    const [{ isOver }, dropRef] = useDrop({\n        accept: \"course\",\n        drop: (item:CourseDisplay) => {\n            if(!semester.courses.includes(item)){\n                const newSem : Semester = semester;\n                newSem.courses = [...semester.courses, item];\n                setSemester(newSem);\n                updateSemesters();\n            }else{\n                alert(\"Course is Already in Semester\");\n            }\n        },\n        collect: (monitor) => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    function updateGrades(sem:Semester, course:CourseDisplay):CourseDisplay[]{\n        let tmp:CourseDisplay[] = [];\n        for(let i = 0; i < sem.courses.length; i++){\n            if(sem.courses[i].info.code === course.info.code){\n                tmp = [...tmp, course];\n            }else{\n                tmp = [...tmp, sem.courses[i]];\n            }\n        }\n        return tmp;        \n    }\n\n    return (\n        <Col ref = {dropRef}>\n            <Table striped bordered hover className=\"semester\">\n                <thead>\n                    <tr>\n                        <th colSpan={3}>{sem.season}{\" \"}{sem.year}</th>\n                        <th>\n                            <Button size=\"sm\" variant=\"outline-danger\" onClick={() => removeSemester(semester.season, semester.year)}>\n                                X\n                            </Button>\n                        </th>\n                    </tr>\n                    <tr>\n                        <th>Course</th>\n                        <th>Credits</th>\n                        <th>Grade</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {semester.courses.map(course =>\n                        <tr key={course.info.name}>\n                            <td>\n                                <a\n                                    onClick={() => {\n                                        setShow(true);\n                                        setMod(JSON.parse(JSON.stringify(course)));\n                                    }}>\n                                    {course.info.code}\n                                    <br></br>\n                                    {course.info.name}\n                                </a>\n                            </td>\n                            <td>{course.info.credits}</td>\n                            <td><Form>\n                                <Form.Select size=\"sm\" aria-label=\"Select grade\" defaultValue=\"-\"\n                                    onChange={(ev: React.ChangeEvent<HTMLSelectElement>) => {\n                                        course = {...course, grade: ev.target.value as string};\n                                        const newSem = semester;\n                                        newSem.courses = updateGrades(newSem, course);\n                                        setSemester(newSem);\n                                        updateSemesters();\n                                    }}>\n                                    <option value={\"-\"}>-</option>\n                                    <option value={\"A\"}>A</option>\n                                    <option value={\"A-\"}>A-</option>\n                                    <option value={\"B+\"}>B+</option>\n                                    <option value={\"B\"}>B</option>\n                                    <option value={\"B-\"}>B-</option>\n                                    <option value={\"C+\"}>C+</option>\n                                    <option value={\"C\"}>C</option>\n                                    <option value={\"C-\"}>C-</option>\n                                    <option value={\"D+\"}>D+</option>\n                                    <option value={\"D\"}>D</option>\n                                    <option value={\"D-\"}>D-</option>\n                                    <option value={\"F\"}>F</option>\n                                    <option value={\"P\"}>P</option>\n                                </Form.Select>\n                            </Form></td>\n                            <td>\n                                <Button size=\"sm\" variant=\"outline-danger\" onClick={() => removeCourse(course.info.name)}>\n                                    {\" \"}\n                                    X{\" \"}\n                                </Button>\n                            </td>\n                        </tr>\n                    )}\n                    {isOver}\n                </tbody>\n            </Table>\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    setSemester({ ...semester, courses: [] });\n                }}>\n                Delete All Courses\n            </Button>\n            {show && <CourseModal\n                show ={show}\n                setShow={setShow}\n                semester={semester}\n                setSemester={setSemester}\n                mod={mod}\n                setMod={setMod}></CourseModal>}\n        </Col>\n    );\n}\n","import { CourseDisplay } from \"./course\";\n\nexport enum season {\n    winter = \"Winter\",\n    spring = \"Spring\",\n    summer = \"Summer\", \n    fall = \"Fall\"\n}\nexport interface Semester {\n    season: season\n    year: number\n    courses: CourseDisplay[]\n}","import React, {useState} from \"react\";\nimport {Button, Row, Modal, Dropdown} from \"react-bootstrap\";\nimport \"react-edit-text/dist/index.css\";\nimport {season, Semester} from \"../interfaces/semester\";\nimport \"../App.css\";\n\ninterface addSemModal {\n    show: boolean;\n    setShow: (s: boolean) => void;\n    semesters: Semester[];\n    setSemesters: (setC: Semester[]) => void;\n}\nexport function AddSemesterModal({\n    show,\n    setShow,\n    semesters,\n    setSemesters,\n}: addSemModal): JSX.Element {\n    const [inputSeason, setInputSeason] = useState<season>(season.fall);\n    const [inputYear, setInputYear] = useState<number>(2021);\n    const years = Array.from(Array(30).keys()).map(x => x + 2012);\n\n    return (\n        <Modal\n            size=\"sm\"\n            show={show}\n            onHide={() => {\n                setShow(false);\n            }}>\n            <Modal.Header closeButton>\n                <Modal.Title>Adding New Semester</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Dropdown>\n                        <strong>Season : </strong>\n                        <Dropdown.Toggle size=\"sm\" variant=\"outline-dark\" id=\"dropdown-basic\">\n                            {inputSeason}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item\n                                onClick={() => {\n                                    setInputSeason(season.fall);\n                                }}>\n                                Fall\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                onClick={() => {\n                                    setInputSeason(season.winter);\n                                }}>\n                                Winter\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                onClick={() => {\n                                    setInputSeason(season.spring);\n                                }}>\n                                Spring\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                onClick={() => {\n                                    setInputSeason(season.summer);\n                                }}>\n                                Summer\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <Dropdown>\n                        <strong>Year : </strong>\n                        <Dropdown.Toggle size=\"sm\" variant=\"outline-dark\" id=\"dropdown-basic\">\n                            {inputYear}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {years.map(year => \n                                <Dropdown.Item key={year}\n                                    onClick={() => {\n                                        setInputYear(year);\n                                    }}>\n                                    {year}\n                                </Dropdown.Item>\n                            )}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        setShow(false);\n                    }}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                        const newSem : Semester[] = semesters;\n                        newSem.push({season : inputSeason, year : inputYear, courses : []});\n                        setSemesters(semesters);\n                        setShow(false);\n                    }}>\n                    Add Semester\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React, {useState} from \"react\";\nimport {Button, Row, ButtonGroup} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../App.css\";\nimport { Semester} from \"../interfaces/semester\";\nimport {SemesterTable} from \"./SemesterTable\";\nimport {CSVLink} from \"react-csv\";\nimport \"../App.css\";\nimport {AddSemesterModal} from \"./AddSemesterModal\";\n\n// import { Course } from \"../interfaces/course\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n/* Downloading CSV file code helper from https://stackoverflow.com/a/65794124/17305181*/\n\ninterface fyp {\n    semesters: Semester[];\n    setSemesters: (s: Semester[]) => void;\n}\ninterface iCSVdata {\n    courseName: string;\n    creditShown: string;\n    gradeShown: string;\n}\nexport function FourYearPlan({semesters, setSemesters}: fyp): JSX.Element {\n    // Show the modal when adding new semester\n    const [show, setShow] = useState(false);\n\n    //Download JSON file trial\n    const downloadJSON = async () => {\n        const downloadData: Semester[] = semesters;\n        const fileName = \"My-Schedule\";\n        const json = JSON.stringify(downloadData); //Convert JSON Array to string.\n        const blob = new Blob([json]); //Convert JSON string to BLOB.\n        const fileDownloadUrl = await URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = fileDownloadUrl;\n        link.download = fileName + \".json\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    //Download CSV file trial\n    const CSVheaders = [\n        {label: \"\", key: \"courseName\"},\n        {label: \"My Schedule\", key: \"creditShown\"},\n        {label: \"\", key: \"gradeShown\"},\n    ];\n    const CSVdata: iCSVdata[] = [];\n    semesters.forEach(item => {\n        CSVdata.push({\n            courseName: \"\",\n            creditShown: \"\",\n            gradeShown: \"\",\n        });\n        CSVdata.push({\n            courseName: item.season,\n            creditShown: item.year.toString(),\n            gradeShown: \"\",\n        });\n        CSVdata.push({\n            courseName: \"Courses\",\n            creditShown: \"Credits\",\n            gradeShown: \"Grades\",\n        });\n        CSVdata.push({\n            courseName: item.courses[0]?.info.code,\n            creditShown: item.courses[0]?.info.credits,\n            gradeShown: item.courses[0]?.grade,\n        });\n        for (let i = 1; i < item.courses.length; i++) {\n            const nlist = item.courses[i];\n            CSVdata.push({\n                courseName: nlist.info.code,\n                creditShown: nlist.info.credits,\n                gradeShown: nlist.grade,\n            });\n        }\n    });\n    return (\n        <div id=\"plan\">\n            <h2 className=\"subtitle\">Four Year Plan</h2>\n            <Row xs={1} md={2} className=\"g-4\">\n                {semesters.map(semester => \n                    <div key={semester.season + semester.year}>\n                        <SemesterTable\n                            sem={semester}\n                            setSemesters={setSemesters}\n                            semesters={semesters}></SemesterTable>\n                    </div>\n                )}\n            </Row>\n            <Row>\n                <ButtonGroup id=\"buttonGroup\">\n                    <Button\n                        id=\"big-scope-button\"\n                        onClick={() => {\n                            setShow(true);\n                        }}>\n                        + Add Semester\n                    </Button>\n                    <Button\n                        id=\"big-scope-button\"\n                        variant=\"secondary\"\n                        onClick={() => {\n                            window.location.reload();\n                        }}>\n                        Reset Plan\n                    </Button>\n                </ButtonGroup>\n            </Row>\n            <Row>\n                <ButtonGroup id=\"buttonGroup\">\n                    <Button id=\"big-scope-button\" variant=\"info\">\n                        <CSVLink\n                            id=\"csvlink\"\n                            data={CSVdata}\n                            headers={CSVheaders}\n                            filename={\"My-Schedule.csv\"}>\n                            Download as .CSV\n                        </CSVLink>\n                    </Button>\n                    <Button id=\"big-scope-button\" variant=\"info\" onClick={downloadJSON}>\n                        Download as .JSON\n                    </Button>\n                </ButtonGroup>\n            </Row>\n            {show && \n                <AddSemesterModal\n                    show={show}\n                    setShow={setShow}\n                    semesters={semesters}\n                    setSemesters={setSemesters}></AddSemesterModal>\n            }\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport function Requirements(): JSX.Element {\n\n    return<Col>\n        <h2 className = \"subtitle\">Degree Requirements</h2>\n        <p>Below are the list of degree requirements that remain unsatisfied.</p>\n    </Col>;\n}","// Drag and Drop used https://medium.com/nmc-techblog/easy-drag-and-drop-in-react-22778b30ba37\n\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { CourseDisplay } from \"../interfaces/course\";\n\ninterface dragClass{\n    course:CourseDisplay\n}\n\nexport function DraggableCourse({course}: dragClass): JSX.Element {\n    const [{ isDragging }, dragRef] = useDrag({\n        type: \"course\",\n        item: course,\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n    return (\n        <div className = \"dragCourse\" ref={dragRef}>\n            {course.info.code} {course.info.name}\n            {isDragging}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Button, Col, Form } from \"react-bootstrap\";\nimport \"../App.css\";\nimport { Course, CourseDisplay } from \"../interfaces/course\";\nimport { findCourse } from \"../utilities/findCourse\";\nimport {DraggableCourse} from \"./DraggableCourse\";\nimport \"../App.css\";\n\nexport function CoursePool(): JSX.Element {\n    const [inpu, setInpu] = useState<string>(\"\");\n    const [courses, setCourses] = useState<CourseDisplay[]>([]);\n\n    function courseExists(code:string):boolean{\n        return courses.some(function(el:CourseDisplay) {\n            return el.info.code === code;\n        });         \n    }\n\n    function addCourse(name: string): void {\n        const course:Course = findCourse(name);\n        if(course.name === \"\"){\n            alert(\"Course Does not Exist\");\n        }else{\n            if(courseExists(name)){\n                alert(\"Course is Already in Pool\");\n            } else{\n                setCourses([...courses, {info:course, grade:\"-\"}]);\n            }\n        }\n    }\n\n    return<Col>\n        <h2 className = \"subtitle\">Course Pool</h2>\n        <Form id= \"searchBar\" onSubmit={(event)=>{\n            addCourse(inpu);\n            event.preventDefault();\n        }}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Enter desired course like so: ACCT 207</Form.Label>\n                <Form.Control value = {inpu} type=\"text\" placeholder=\"Coure Code\" onChange={e=>setInpu(e.target.value.toUpperCase())} />\n            </Form.Group>\n            <Button onClick={() => {\n                addCourse(inpu);\n            }}>\n            Add Course  \n            </Button>\n        </Form>\n        {courses.map(course => \n            <div key = {course.info.code}>\n                <DraggableCourse course = {course}></DraggableCourse>\n            </div>\n        )}\n    </Col>;\n}","import { Course } from \"../interfaces/course\";\nimport Catalog from \"../data/catalog.json\";\n\nexport function findCourse(name:string): Course{\n    const code = name.substr(0, 4);\n    const CATALOG_DATA: Record<string, Record<string, Course>> = Catalog;\n    let course:Course;\n    try{\n        course = CATALOG_DATA[code][name];\n    }catch{\n        console.log(\"catch\");\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    if(course === undefined){\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    return course;\n}","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {FourYearPlan} from \"./components/FourYearPlan\";\nimport {Requirements} from \"./components/Requirements\";\nimport {CoursePool} from \"./components/CoursePool\";\nimport { DndProvider } from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\n\nimport { season, Semester } from \"./interfaces/semester\";\n//import {CourseDisplay } from \"./interfaces/course\";\n//import { findCourse } from \"./utilities/findCourse\";\n\n/*const testCourses: CourseDisplay[] = [\n    {info: findCourse(\"EGGG 101\"), grade: \"F\"},\n    {info: findCourse(\"CISC 108\"), grade: \"F\"},\n    {info: findCourse(\"MATH 241\"), grade: \"F\"},\n    {info: findCourse(\"ENGL 110\"), grade: \"F\"},\n    {info: findCourse(\"ARTH 237\"), grade: \"F\"},\n];*/\n\nconst defaultSemesters: Semester[] = [\n    {season: season.fall, year: 2021, courses: []},\n    {season: season.spring, year: 2022, courses: []}\n];\n\n\n\nfunction App(): JSX.Element {\n    // All courses in our database\n    // const [courses, setCourses] = useState<Course[]>(testCourses);\n\n    const [semesters, setSemesters] = useState<Semester[]>(defaultSemesters);\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Container fluid className=\"App\">\n                <h1 id=\"title\">UD CIS Scheduler</h1>\n                <Row>\n                    <Col><CoursePool></CoursePool></Col>\n                    <Col md={8}><FourYearPlan semesters={semesters} setSemesters={setSemesters} ></FourYearPlan></Col>\n                    <Col><Requirements></Requirements></Col>\n                </Row>\n            </Container>\n        </DndProvider>\n    );\n}\n    \nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}