{"version":3,"sources":["components/SemesterTable.tsx","components/FourYearPlan.tsx","components/Requirements.tsx","utilities/findCourse.ts","components/CoursePool.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SemesterTable","semester","setSemester","semesters","useState","courses","setCourses","show","setShow","mod","setMod","handleSave","name","value","previousValue","newMod","info","descr","credits","preReq","restrict","breadth","typ","console","log","Col","Table","striped","bordered","hover","className","colSpan","title","Button","variant","onClick","filter","map","course","JSON","parse","stringify","code","grade","Modal","size","onHide","Header","closeButton","Title","defaultValue","onSave","Body","Row","md","rows","Footer","newCourses","findIndex","c","handleSaveChanges","FourYearPlan","setSemesters","id","xs","ButtonGroup","length","splice","window","location","reload","Requirements","findCourse","substr","CATALOG_DATA","Catalog","undefined","CoursePool","inpu","setInpu","addCourse","alert","some","el","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","defaultSemesters","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04eabf53.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Button, Col, Table, Row, Modal} from \"react-bootstrap\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport {Semester} from \"../interfaces/semester\";\nimport { EditText, EditTextarea } from \"react-edit-text\";\nimport \"react-edit-text/dist/index.css\";\nimport \"../App.css\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n\ninterface semesterTable {\n    semester: Semester;\n    setSemester: (s: Semester[]) => void;\n    semesters: Semester[];\n}\n\nexport function SemesterTable({semester, setSemester, semesters}: semesterTable): JSX.Element {\n    const [courses, setCourses] = useState<CourseDisplay[]>(semester.courses);\n    const [show, setShow] = useState<boolean>(false); //To show Modal when Course is clicked\n    const [mod, setMod] = useState<CourseDisplay>(courses[0]); // staging the changed info before save\n\n    // Removes a course from a semester based on its name\n    function removeCourse(name: string): void {\n        setCourses([...courses.filter(course => course.info.name !== name)]);\n        semester.courses = courses;\n    }\n\n    function removeSemester(name: string): void {\n        setSemester([...semesters.filter(semester => semester.title !== name)]);\n        semester.courses = courses;\n    }\n\n    //handle staging chnaged info \n    const handleSave = ({\n        name,\n        value,\n        previousValue,\n    }: {\n        name: string;\n        value: string;\n        previousValue: string;\n    }) => { \n        const newMod: CourseDisplay = mod;\n        switch (name) {\n        case \"name\" : {\n            newMod.info.name = value;\n            break;\n        }\n        case \"descr\": {\n            newMod.info.descr = value;\n            break;\n        }\n        case \"credits\": {\n            newMod.info.credits = value;\n            break;\n        }\n        case \"preReq\": {\n            newMod.info.preReq = value;\n            break;\n        }\n        case \"restrict\": {\n            newMod.info.restrict = value;\n            break;\n        }\n        case \"breadth\": {\n            newMod.info.breadth = value;\n            break;\n        }\n        case \"typ\": {\n            newMod.info.typ = value;\n            break;\n        }\n        }\n        setMod(newMod);\n        console.log(\"Previous info: \" + previousValue);\n        console.log(\"New info: \" + value);\n    };\n\n    //handle reset courses info after modifying in modal\n    function handleSaveChanges(): void {\n        const newCourses: CourseDisplay[] = [...courses];\n        newCourses[courses.findIndex(c => c.info.code == mod.info.code)] = mod;\n        setCourses(newCourses);\n    }\n\n    return (\n        <Col>\n            <Table striped bordered hover className=\"semester\">\n                <thead>\n                    <tr>\n                        <th colSpan={3}>{semester.title}</th>\n                        <th>\n                            <Button variant=\"outline-dark\" onClick={() => removeSemester(semester.title)}>\n                                X\n                            </Button>\n                        </th>\n                    </tr>\n                    <tr>\n                        <th>Course</th>\n                        <th>Credits</th>\n                        <th>Grade</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {courses.map(course => \n                        <tr key={course.info.name}>\n                            <td>\n                                <a\n                                    onClick={() => {\n                                        setShow(true);\n                                        setMod(JSON.parse(JSON.stringify(course)));\n                                    }}>\n                                    {course.info.code}\n                                    <br></br>\n                                    {course.info.name}\n                                </a>\n                            </td>\n                            <td>{course.info.credits}</td>\n                            <td>{course.grade}</td>\n                            <td>\n                                <Button variant=\"outline-dark\" onClick={() => removeCourse(course.info.name)}>\n                                    {\" \"}\n                                    X{\" \"}\n                                </Button>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </Table>\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    setCourses([]);\n                }}>\n                Delete All Courses\n            </Button>\n            <Modal\n                show={show}\n                size=\"lg\"\n                onHide={() => {\n                    setShow(false);\n                }}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {mod?.info.code}\n                        <EditText \n                            name=\"name\"\n                            defaultValue={mod?.info.name}\n                            onSave={handleSave}></EditText>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Row>\n                        <Col md=\"2\">\n                            <strong>Description:</strong>\n                        </Col>\n                        <Col>\n                            <EditTextarea\n                                rows={4}\n                                name=\"descr\"\n                                defaultValue={mod?.info.descr}\n                                onSave={handleSave}></EditTextarea>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md=\"2\">\n                            <strong>Credits:</strong>\n                        </Col>\n                        <Col>\n                            <EditText\n                                name=\"credits\"\n                                defaultValue={mod?.info.credits}\n                                onSave={handleSave}></EditText>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md=\"2\">\n                            <strong>Pre-Reqs:</strong>\n                        </Col>\n                        <Col>\n                            <EditText\n                                name=\"preReq\"\n                                defaultValue={mod?.info.preReq}\n                                onSave={handleSave}></EditText>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md=\"2\">\n                            <strong>Restriction:</strong>\n                        </Col>\n                        <Col>\n                            <EditText\n                                name=\"restrict\"\n                                defaultValue={mod?.info.restrict}\n                                onSave={handleSave}></EditText>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md=\"2\">\n                            <strong>Breadth:</strong>\n                        </Col>\n                        <Col>\n                            <EditText\n                                name=\"breadth\"\n                                defaultValue={mod?.info.breadth}\n                                onSave={handleSave}></EditText>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md=\"2\">\n                            <strong>Avalability:</strong>\n                        </Col>\n                        <Col>\n                            <EditText\n                                name=\"typ\"\n                                defaultValue={mod?.info.typ}\n                                onSave={handleSave}></EditText>\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => {\n                            setShow(false);\n                        }}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => {\n                            handleSaveChanges();\n                            setShow(false);\n                        }}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Col>\n    );\n}\n","import React from \"react\";\nimport { Button, Row, ButtonGroup } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../App.css\";\nimport { Semester } from \"../interfaces/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n// import { Course } from \"../interfaces/course\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n\ninterface fyp {\n    semesters: Semester[],\n    setSemesters: (s: Semester[]) => void\n\n}\n\n\nexport function FourYearPlan({ semesters, setSemesters }: fyp): JSX.Element {\n\n    // Removes the most recently added semester in the list, does nothing if no semesters left\n    function removeLastSemester(): void {\n        if (semesters.length) {\n            semesters.splice(-1);\n            setSemesters([...semesters]);\n        }\n    }\n\n    // Adds a new semester with the given title (ex. \"Fall 2021\") and no courses\n    function addSemester(title: string): void {\n        setSemesters([...semesters, { title: title, courses: [] }]);\n    }\n\n    return <div id=\"plan\">\n        <h2 className=\"subtitle\">Four Year Plan</h2>\n        <Row xs={1} md={2} className=\"g-4\">\n            {semesters.map((semester) => <div key={semester.title}>\n                <SemesterTable semester={semester} setSemester={setSemesters} semesters={semesters}></SemesterTable>\n            </div>)}\n        </Row>\n        <Row>\n            <ButtonGroup id = \"buttonGroup\">\n                <Button\n                    onClick={() => {\n                        addSemester(\"test semester\");\n                    }}>\n                    + Add Semester\n                </Button>\n                <Button\n                    variant=\"danger\"\n                    onClick={() => {\n                        removeLastSemester();\n                    }}>\n                    - Delete Semester\n                </Button>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        window.location.reload();\n                    }}>\n                    Reset Plan\n                </Button>\n            </ButtonGroup>\n        </Row>\n    </div>;\n}","import React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport function Requirements(): JSX.Element {\n\n    return<Col>\n        <h2 className = \"subtitle\">Degree Requirements</h2>\n        <p>Below are the list of degree requirements that remain unsatisfied.</p>\n    </Col>;\n}","import { Course } from \"../interfaces/course\";\nimport Catalog from \"../data/catalog.json\";\n\nexport function findCourse(name:string): Course{\n    const code = name.substr(0, 4);\n    const CATALOG_DATA: Record<string, Record<string, Course>> = Catalog;\n    let course:Course;\n    try{\n        course = CATALOG_DATA[code][name];\n    }catch{\n        console.log(\"catch\");\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    if(course === undefined){\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    return course;\n}","import React, { useState } from \"react\";\nimport { Button, Col, Form } from \"react-bootstrap\";\nimport \"../App.css\";\nimport { Course, CourseDisplay } from \"../interfaces/course\";\nimport { findCourse } from \"../utilities/findCourse\";\n\nexport function CoursePool(): JSX.Element {\n    const [inpu, setInpu] = useState<string>(\"\");\n    const [courses, setCourses] = useState<CourseDisplay[]>([]);\n\n    function courseExists(code:string):boolean{\n        return courses.some(function(el:CourseDisplay) {\n            return el.info.code === code;\n        });         \n    }\n\n    function addCourse(name: string): void {\n        const course:Course = findCourse(name);\n        console.log(course);\n        if(course.name === \"\"){\n            alert(\"Course Does not Exist\");\n        }else{\n            if(courseExists(name)){\n                alert(\"Course is Already in Pool\");\n            } else{\n                setCourses([...courses, {info:course, grade:\"A\"}]);\n            }\n        }\n    }\n\n    return<Col>\n        <h2 className = \"subtitle\">Course Pool</h2>\n        <Form>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Enter desired course like so: ACCT 207</Form.Label>\n                <Form.Control value = {inpu} type=\"text\" placeholder=\"Coure Code\" onChange={e=>setInpu(e.target.value)} />\n            </Form.Group>\n            <Button onClick={() => {\n                addCourse(inpu);\n            }}>\n            Add Course  \n            </Button>\n        </Form>\n        {courses.map(course => \n            <div key = {course.info.code}>\n                {course.info.code} {course.info.name}\n            </div>\n        )}\n    </Col>;\n}","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {FourYearPlan} from \"./components/FourYearPlan\";\nimport {Requirements} from \"./components/Requirements\";\nimport {CoursePool} from \"./components/CoursePool\";\nimport {CourseDisplay } from \"./interfaces/course\";\nimport { Semester } from \"./interfaces/semester\";\nimport { findCourse } from \"./utilities/findCourse\";\n\nconst testCourses: CourseDisplay[] = [\n    {info: findCourse(\"EGGG 101\"), grade: \"F\"},\n    {info: findCourse(\"CISC 108\"), grade: \"F\"},\n    {info: findCourse(\"MATH 241\"), grade: \"F\"},\n    {info: findCourse(\"ENGL 110\"), grade: \"F\"},\n    {info: findCourse(\"ARTH 237\"), grade: \"F\"},\n];\n\nconst defaultSemesters: Semester[] = [\n    {title: \"Fall 2021\", courses: testCourses},\n    {title: \"Spring 2022\", courses: []}\n];\n\n\n\nfunction App(): JSX.Element {\n    // All courses in our database\n    // const [courses, setCourses] = useState<Course[]>(testCourses);\n\n    const [semesters, setSemesters] = useState<Semester[]>(defaultSemesters);\n\n    return (\n        <Container className=\"App\">\n            <h1 id=\"title\">UD CIS Scheduler</h1>\n\n            <Row>\n                <Col><CoursePool></CoursePool></Col>\n                <Col xs={7}><FourYearPlan semesters={semesters} setSemesters={setSemesters} ></FourYearPlan></Col>\n                <Col><Requirements></Requirements></Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}