{"version":3,"sources":["interfaces/semester.ts","components/SemesterTitleEdit.tsx","components/CourseModal.tsx","components/SemesterTable.tsx","components/FourYearPlan.tsx","components/Requirements.tsx","utilities/findCourse.ts","components/CoursePool.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["season","SemesterTitleEdit","semester","setSemester","years","Array","from","keys","map","x","Form","Row","className","Col","Select","defaultValue","fall","onChange","ev","newSemester","target","value","winter","spring","summer","year","CourseModal","show","setShow","mod","setMod","handleSave","name","previousValue","newMod","info","descr","credits","preReq","restrict","breadth","typ","console","log","Modal","size","onHide","Header","closeButton","Title","code","onSave","Body","md","rows","Footer","Button","variant","onClick","newSem","courses","findIndex","c","handleSaveChanges","SemesterTable","sem","setSemesters","semesters","useState","Table","striped","bordered","hover","colSpan","filter","removeSemester","course","JSON","parse","stringify","grade","FourYearPlan","downloadJSON","a","downloadData","fileName","json","blob","Blob","URL","createObjectURL","fileDownloadUrl","link","document","createElement","href","download","body","appendChild","click","removeChild","CSVdata","forEach","item","push","courseName","creditShown","gradeShown","i","length","nlist","id","xs","ButtonGroup","addSemester","splice","window","location","reload","data","headers","label","key","separator","Requirements","findCourse","substr","CATALOG_DATA","Catalog","undefined","CoursePool","inpu","setInpu","setCourses","addCourse","alert","some","el","Group","controlId","Label","Control","type","placeholder","e","testCourses","defaultSemesters","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3ee31e85.chunk.js","sourcesContent":["import { CourseDisplay } from \"./course\";\n\nexport enum season {\n    fall = \"Fall\",\n    winter = \"Winter\",\n    spring = \"Spring\",\n    summer = \"Summer\"\n}\nexport interface Semester {\n    season: season\n    year: number\n    courses: CourseDisplay[]\n}","import React from \"react\";\nimport { Row, Col, Form } from \"react-bootstrap\";\nimport { Semester, season } from \"../interfaces/semester\";\n\ninterface semesterTitleEdit {\n    semester: Semester;\n    setSemester: (s: Semester) => void;\n    //semesters: Semester[];\n}\n\nexport function SemesterTitleEdit({ semester, setSemester }: semesterTitleEdit): JSX.Element {\n    const years = Array.from(Array(30).keys()).map(x => x + 1995);\n\n    return <Form>\n        <Row className=\"g-2\">\n            <Col>\n                <Form.Select aria-label=\"Select season\" defaultValue={season.fall}\n                    onChange={(ev: React.ChangeEvent<HTMLSelectElement>) => {\n                        const newSemester = {...semester, season: ev.target.value as season};\n                        setSemester(newSemester);\n                        semester=newSemester;\n                    }}>\n                    <option value={season.fall}>Fall</option>\n                    <option value={season.winter}>Winter</option>\n                    <option value={season.spring}>Spring</option>\n                    <option value={season.summer}>Summer</option>\n                </Form.Select>\n            </Col>\n            <Col>\n                <Form.Select aria-Label=\"Select year\" defaultValue={2021}\n                    onChange={(ev: React.ChangeEvent<HTMLSelectElement>) => {\n                        const newSemester = {...semester, year: +ev.target.value};\n                        setSemester(newSemester);\n                        semester=newSemester;\n                    }}>\n                    <option>Select Year</option>\n                    {years.map((year) => <option key={year}>{year}</option>)}\n                </Form.Select>\n            </Col>\n        </Row>\n    </Form>;\n}","import React from \"react\";\nimport {Button, Col, Row, Modal} from \"react-bootstrap\";\nimport {EditText, EditTextarea} from \"react-edit-text\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport \"react-edit-text/dist/index.css\";\nimport { Semester } from \"../interfaces/semester\";\n\n\ninterface courseModal {\n    show: boolean;\n    setShow: (s: boolean) => void;\n    semester: Semester;\n    setSemester: (setC: Semester) => void;\n    mod: CourseDisplay;\n    setMod: (setMod: CourseDisplay) => void;\n}\ninterface save{\n    name : string;\n    value : string;\n    previousValue : string;\n}\n\nexport function CourseModal({\n    show,\n    setShow,\n    semester,\n    setSemester,\n    mod,\n    setMod,\n}: courseModal): JSX.Element {\n\n    //handle staging chnaged info\n    const handleSave = ({\n        name,\n        value,\n        previousValue,\n    }: save) => {\n        const newMod: CourseDisplay = mod;\n        switch (name) {\n        case \"name\": {\n            newMod.info.name = value;\n            break;\n        }\n        case \"descr\": {\n            newMod.info.descr = value;\n            break;\n        }\n        case \"credits\": {\n            newMod.info.credits = value;\n            break;\n        }\n        case \"preReq\": {\n            newMod.info.preReq = value;\n            break;\n        }\n        case \"restrict\": {\n            newMod.info.restrict = value;\n            break;\n        }\n        case \"breadth\": {\n            newMod.info.breadth = value;\n            break;\n        }\n        case \"typ\": {\n            newMod.info.typ = value;\n            break;\n        }\n        }\n        setMod(newMod);\n        console.log(\"Previous info: \" + previousValue);\n        console.log(\"New info: \" + value);\n    };\n\n    //handle reset courses info after modifying in modal\n    function handleSaveChanges(): void {\n        const newSem : Semester = semester;\n        newSem.courses[semester.courses.findIndex(c => c.info.code == mod.info.code)] = mod;\n        setSemester(newSem);\n    }\n    return (\n        <Modal\n            show={show}\n            size=\"lg\"\n            onHide={() => {\n                setShow(false);\n            }}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    {mod?.info.code}\n                    <EditText\n                        name=\"name\"\n                        defaultValue={mod?.info.name}\n                        onSave={handleSave}></EditText>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Description:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={4}\n                            name=\"descr\"\n                            defaultValue={mod?.info.descr}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Credits:</strong>\n                    </Col>\n                    <Col>\n                        <EditText\n                            name=\"credits\"\n                            defaultValue={mod?.info.credits}\n                            onSave={handleSave}></EditText>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Pre-Reqs:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"preReq\"\n                            defaultValue={mod?.info.preReq}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Restriction:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"restrict\"\n                            defaultValue={mod?.info.restrict}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Breadth:</strong>\n                    </Col>\n                    <Col>\n                        <EditTextarea\n                            rows={2}\n                            name=\"breadth\"\n                            defaultValue={mod?.info.breadth}\n                            onSave={handleSave}></EditTextarea>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"2\">\n                        <strong>Avalability:</strong>\n                    </Col>\n                    <Col>\n                        <EditText\n                            name=\"typ\"\n                            defaultValue={mod?.info.typ}\n                            onSave={handleSave}></EditText>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        setShow(false);\n                    }}>\n                    Close\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                        handleSaveChanges();\n                        setShow(false);\n                    }}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React, {useState} from \"react\";\nimport {Button, Col, Table} from \"react-bootstrap\";\nimport {season, Semester} from \"../interfaces/semester\";\nimport {SemesterTitleEdit} from \"./SemesterTitleEdit\";\nimport {CourseDisplay} from \"../interfaces/course\";\nimport {CourseModal} from \"./CourseModal\";\nimport \"../App.css\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n\ninterface semesterTable {\n    sem: Semester;\n    setSemesters: (s: Semester[]) => void;\n    semesters: Semester[];\n}\n\nexport function SemesterTable({sem, setSemesters, semesters}: semesterTable): JSX.Element {\n    const [semester, setSemester] = useState<Semester>(sem);    \n    const [show, setShow] = useState<boolean>(false); //To show Modal when Course is clicked\n    const [mod, setMod] = useState<CourseDisplay>(semester.courses[0]); // staging the changed info before save\n    // Removes a course from a semester based on its name\n    function removeCourse(name: string): void {\n        setSemester({...semester, courses: semester.courses.filter(course => course.info.name !== name)});\n        sem = semester;\n    }\n\n    function removeSemester(season: season, year: number): void {\n        setSemesters([...semesters.filter(semester => (semester.season !== season) && (semester.year !== year))]);\n    }\n\n    return (\n        <Col>\n            <Table striped bordered hover className=\"semester\">\n                <thead>\n                    <tr>\n                        <th colSpan={3}><SemesterTitleEdit semester={semester} setSemester={setSemester}></SemesterTitleEdit></th>\n                        <th>\n                            <Button variant=\"outline-dark\" onClick={() => removeSemester(semester.season, semester.year)}>\n                                X\n                            </Button>\n                        </th>\n                    </tr>\n                    <tr>\n                        <th>Course</th>\n                        <th>Credits</th>\n                        <th>Grade</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {semester.courses.map(course => \n                        <tr key={course.info.name}>\n                            <td>\n                                <a\n                                    onClick={() => {\n                                        setShow(true);\n                                        setMod(JSON.parse(JSON.stringify(course)));\n                                    }}>\n                                    {course.info.code}\n                                    <br></br>\n                                    {course.info.name}\n                                </a>\n                            </td>\n                            <td>{course.info.credits}</td>\n                            <td>{course.grade}</td>\n                            <td>\n                                <Button variant=\"outline-dark\" onClick={() => removeCourse(course.info.name)}>\n                                    {\" \"}\n                                    X{\" \"}\n                                </Button>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </Table>\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    setSemester({...semester, courses: []});\n                }}>\n                Delete All Courses\n            </Button>\n            {show && <CourseModal\n                show ={show}\n                setShow={setShow}\n                semester={semester}\n                setSemester={setSemester}\n                mod={mod}\n                setMod={setMod}></CourseModal>}\n        </Col>\n    );\n}\n","import React from \"react\";\nimport {Button, Row, ButtonGroup} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../App.css\";\nimport {season, Semester} from \"../interfaces/semester\";\nimport {SemesterTable} from \"./SemesterTable\";\nimport {CSVLink} from \"react-csv\";\n\n// import { Course } from \"../interfaces/course\";\n\n/* Getting a table to render based on a list is from https://stackoverflow.com/questions/54659039/remove-table-row-using-hooks */\n/* Removing from a list is from https://www.robinwieruch.de/react-remove-item-from-list */\n/* Downloading CSV file code helper from https://stackoverflow.com/a/65794124/17305181*/\n\ninterface fyp {\n    semesters: Semester[];\n    setSemesters: (s: Semester[]) => void;\n}\ninterface iCSVdata {\n    courseName: string;\n    creditShown: string;\n    gradeShown: string;\n}\nexport function FourYearPlan({semesters, setSemesters}: fyp): JSX.Element {\n    // Removes the most recently added semester in the list, does nothing if no semesters left\n    function removeLastSemester(): void {\n        if (semesters.length) {\n            semesters.splice(-1);\n            setSemesters([...semesters]);\n        }\n    }\n\n    // Adds a new semester with the given title (ex. \"Fall 2021\") and no courses\n    function addSemester(season: season, year: number): void {\n        setSemesters([...semesters, {season: season, year: year, courses: []}]);\n    }\n\n    //Download JSON file trial\n    const downloadJSON = async () => {\n        const downloadData: Semester[] = semesters;\n        const fileName = \"My-Schedule\";\n        const json = JSON.stringify(downloadData); //Convert JSON Array to string.\n        const blob = new Blob([json]); //Convert JSON string to BLOB.\n        const fileDownloadUrl = await URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = fileDownloadUrl;\n        link.download = fileName + \".json\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    //Download CSV file trial\n    const CSVheaders = [\n        {label: \"Course\", key: \"courseName\"},\n        {label: \"Credits\", key: \"creditShown\"},\n        {label: \"Grade\", key: \"gradeShown\"},\n    ];\n    const CSVdata: iCSVdata[] = [];\n    semesters.forEach(item => {\n        CSVdata.push({\n            courseName: item.courses[0]?.info.code,\n            creditShown: item.courses[0]?.info.credits,\n            gradeShown: item.courses[0]?.grade,\n        });\n        for (let i = 1; i < item.courses.length; i++) {\n            const nlist = item.courses[i];\n            CSVdata.push({\n                courseName: nlist.info.code,\n                creditShown: nlist.info.credits,\n                gradeShown: nlist.grade,\n            });\n        }\n    });\n    return (\n        <div id=\"plan\">\n            <h2 className=\"subtitle\">Four Year Plan</h2>\n            <Row xs={1} md={2} className=\"g-4\">\n                {semesters.map(semester => \n                    <div key={semester.season + semester.year}>\n                        <SemesterTable\n                            sem={semester}\n                            setSemesters={setSemesters}\n                            semesters={semesters}></SemesterTable>\n                    </div>\n                )}\n            </Row>\n            <Row>\n                <ButtonGroup id=\"buttonGroup\">\n                    <Button\n                        id=\"big-scope-button\"\n                        onClick={() => {\n                            addSemester(season.summer, 2022);\n                            console.log(CSVdata);\n                        }}>\n                        + Add Semester\n                    </Button>\n                    <Button\n                        id=\"big-scope-button\"\n                        variant=\"danger\"\n                        onClick={() => {\n                            removeLastSemester();\n                        }}>\n                        - Delete Semester\n                    </Button>\n                    <Button\n                        id=\"big-scope-button\"\n                        variant=\"secondary\"\n                        onClick={() => {\n                            window.location.reload();\n                        }}>\n                        Reset Plan\n                    </Button>\n                </ButtonGroup>\n            </Row>\n            <Row>\n                <ButtonGroup id=\"buttonGroup\">\n                    <Button id=\"big-scope-button\" variant=\"info\">\n                        <CSVLink id=\"csvlink\" data={CSVdata} headers={CSVheaders} separator={\",\"}>\n                            Download as .CSV\n                        </CSVLink>\n                    </Button>\n                    <Button id=\"big-scope-button\" variant=\"info\" onClick={downloadJSON}>\n                        Download as .JSON\n                    </Button>\n                </ButtonGroup>\n            </Row>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport function Requirements(): JSX.Element {\n\n    return<Col>\n        <h2 className = \"subtitle\">Degree Requirements</h2>\n        <p>Below are the list of degree requirements that remain unsatisfied.</p>\n    </Col>;\n}","import { Course } from \"../interfaces/course\";\nimport Catalog from \"../data/catalog.json\";\n\nexport function findCourse(name:string): Course{\n    const code = name.substr(0, 4);\n    const CATALOG_DATA: Record<string, Record<string, Course>> = Catalog;\n    let course:Course;\n    try{\n        course = CATALOG_DATA[code][name];\n    }catch{\n        console.log(\"catch\");\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    if(course === undefined){\n        course = {\n            code: \"\",\n            name: \"\",\n            descr: \"\",\n            credits: \"\",\n            preReq: \"\",\n            restrict: \"\",\n            breadth: \"\",\n            typ: \"\",\n        };\n    }\n    return course;\n}","import React, { useState } from \"react\";\nimport { Button, Col, Form } from \"react-bootstrap\";\nimport \"../App.css\";\nimport { Course, CourseDisplay } from \"../interfaces/course\";\nimport { findCourse } from \"../utilities/findCourse\";\n\nexport function CoursePool(): JSX.Element {\n    const [inpu, setInpu] = useState<string>(\"\");\n    const [courses, setCourses] = useState<CourseDisplay[]>([]);\n\n    function courseExists(code:string):boolean{\n        return courses.some(function(el:CourseDisplay) {\n            return el.info.code === code;\n        });         \n    }\n\n    function addCourse(name: string): void {\n        const course:Course = findCourse(name);\n        console.log(course);\n        if(course.name === \"\"){\n            alert(\"Course Does not Exist\");\n        }else{\n            if(courseExists(name)){\n                alert(\"Course is Already in Pool\");\n            } else{\n                setCourses([...courses, {info:course, grade:\"A\"}]);\n            }\n        }\n    }\n\n    return<Col>\n        <h2 className = \"subtitle\">Course Pool</h2>\n        <Form>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Enter desired course like so: ACCT 207</Form.Label>\n                <Form.Control value = {inpu} type=\"text\" placeholder=\"Coure Code\" onChange={e=>setInpu(e.target.value)} />\n            </Form.Group>\n            <Button onClick={() => {\n                addCourse(inpu);\n            }}>\n            Add Course  \n            </Button>\n        </Form>\n        {courses.map(course => \n            <div key = {course.info.code}>\n                {course.info.code} {course.info.name}\n            </div>\n        )}\n    </Col>;\n}","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {FourYearPlan} from \"./components/FourYearPlan\";\nimport {Requirements} from \"./components/Requirements\";\nimport {CoursePool} from \"./components/CoursePool\";\n\nimport { season, Semester } from \"./interfaces/semester\";\nimport {CourseDisplay } from \"./interfaces/course\";\nimport { findCourse } from \"./utilities/findCourse\";\n\nconst testCourses: CourseDisplay[] = [\n    {info: findCourse(\"EGGG 101\"), grade: \"F\"},\n    {info: findCourse(\"CISC 108\"), grade: \"F\"},\n    {info: findCourse(\"MATH 241\"), grade: \"F\"},\n    {info: findCourse(\"ENGL 110\"), grade: \"F\"},\n    {info: findCourse(\"ARTH 237\"), grade: \"F\"},\n];\n\nconst defaultSemesters: Semester[] = [\n    {season: season.fall, year: 2021, courses: testCourses},\n    {season: season.spring, year: 2022, courses: []}\n];\n\n\n\nfunction App(): JSX.Element {\n    // All courses in our database\n    // const [courses, setCourses] = useState<Course[]>(testCourses);\n\n    const [semesters, setSemesters] = useState<Semester[]>(defaultSemesters);\n\n    return (\n        <Container className=\"App\">\n            <h1 id=\"title\">UD CIS Scheduler</h1>\n\n            <Row>\n                <Col><CoursePool></CoursePool></Col>\n                <Col xs={7}><FourYearPlan semesters={semesters} setSemesters={setSemesters} ></FourYearPlan></Col>\n                <Col><Requirements></Requirements></Col>\n            </Row>\n        </Container>\n    );\n}\n    \nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}